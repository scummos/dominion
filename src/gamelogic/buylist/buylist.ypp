%code requires {
  #include <vector>
  #include "buylist.h"
  #include "conditionfactory.h"
  #include "genericcardoption.h"
  #include "strategy.h"
  #include <string.h>
}

%{
    #define YYERROR_VERBOSE
    #include <cstdio>
    #include <iostream>
    #include "buylist.h"
    #include "buylist.tab.hpp"
    using namespace std;

    typedef struct yy_buffer_state *YY_BUFFER_STATE;
    extern YY_BUFFER_STATE yy_scan_string(char const* base);
    extern void yyrestart(FILE *input_file);
    extern int yycolumn, yylineno;
    extern void yy_delete_buffer(yy_buffer_state*);
    extern int yylex(yy::parser::semantic_type*, yy::parser::location_type*);
    extern "C" {
        extern FILE *yyin;
    }

    extern int parse_buylist(char* fn, BuylistCollection& ret, StrategyCollection& strats);
%}

%locations

%parse-param { BuylistCollection& ret }
%parse-param { StrategyCollection& strats }
%define parse.trace
%define parse.lac full
%define parse.error verbose

%language "c++"
%define api.value.type variant

// define the constant-string tokens:
%token BUYLISTS LIST END COMMENT LPAREN RPAREN NOT IF NEWLINE ARROW STRATEGIES STRATEGY
%token PLAYORDER OPTIONS OPTION FOR OPTIONAL TAG_DISCARD TAG_TRASH TAG_KEEP TAG_CHOOSE TAG_IGNORE
%token REACTIONS

%token <int> INT
%token <std::string> STRING

%nterm <std::vector<Buylist>> lists
%nterm <Buylist> list
%nterm <std::vector<BuyAction>> list_entries
%nterm <BuyAction> list_entry

%nterm <std::vector<Strategy>> strats
%nterm <Strategy> strat
%nterm <Strategy> strat_body
%nterm <std::vector<Playorder>> playorders
%nterm <Playorder> playorder
%nterm <GenericOption> cardoption
%nterm <GenericOptions> cardoptions
%nterm <std::any> cardoption_expr
%nterm <std::any> cardoption_expr_value
%nterm <TaggedExpr> cardoption_tagged_expr
%nterm <std::vector<TaggedExpr>> cardoption_tagged_expr_list
%nterm <std::vector<std::any>> cardoption_expr_list

%nterm <Condition::Ptr> condition
%nterm <std::vector<std::any>> func_arglist
%nterm <Condition::Ptr> condition_expr
%nterm <CardId> card_name
%nterm <ReactKind> reactoption_name
%nterm <std::any> expr
%nterm <std::any> constant

%%

buylist:
  buylist_section { }
  ;
buylist_section:
  BUYLISTS lists END STRATEGIES strats END {
      ret = BuylistCollection({$2});
      strats = StrategyCollection({$5});
    }
  ;
lists:
  lists list {
      $1.push_back($2);
      $$ = $1;
    }
  | list {
      $$ = std::vector<Buylist>{$1};
    }
  ;
list:
  LIST list_entries END {
      $$ = Buylist($2);
    }
  | LIST condition list_entries END {
      $$ = Buylist($2, $3);
    }
  ;
list_entries:
  list_entries list_separator list_entry {
      $1.push_back($3);
      $$ = $1;
    }
  | list_entry {
      $$ = {$1};
    }
  | %empty {
      $$ = {};
    }
  ;
list_separator:
  ',' | NEWLINE
  ;
list_entry:
  card_name {
      $$ = BuyAction($1);
    }
  | card_name condition {
      $$ = BuyAction($2, $1);
    }
  | card_name '[' INT ']' {
      auto cond = createCondition("Not", {createCondition("Has", {$1, $3})});
      $$ = BuyAction(cond, $1);
    }
  | card_name '[' INT ']' condition {
      auto cond = createCondition("AllOf", {$5, createCondition("Not", {createCondition("Has", {$1, $3})})});
      $$ = BuyAction(cond, $1);
    }
  ;
condition:
  IF condition_expr {
      $$ = $2;
    }
  | IF NOT condition_expr {
      $$ = createCondition("Not", {$3});
    }
  ;
condition_expr:
  STRING '(' func_arglist ')' {
      try {
        $$ = createCondition($1, $3);
      }
      catch (InvalidConditionError e) {
        throw parser::syntax_error(yylhs.location, e.error);
      }
    }
  ;
func_arglist:
  expr {
      $$ = std::vector<std::any>{$1};
    }
  | func_arglist ',' expr {
      $1.push_back($3);
      $$ = $1;
    }
  ;
expr:
  constant {
      $$ = std::any($1);
    }
  | condition_expr {
      $$ = std::any($1);
    }
  ;
constant:
  INT {
      $$ = std::any($1);
    }
  | card_name {
      $$ = std::any($1);
    }
  ;
card_name:
  STRING {
      $$ = cardId($1);
      if ($$ == CardId::Invalid) {
        throw parser::syntax_error(yylhs.location, "Invalid card name");
      }
    }
  ;
reactoption_name:
  STRING {
      $$ = reactKind($1);
      if ($$ == ReactKind::Invalid) {
        throw parser::syntax_error(yylhs.location, "Invalid reaction kind");
      }
    }
  ;
strats:
  strats strat {
      $1.push_back($2);
      $$ = $1;
    }
  | strat {
      $$ = std::vector<Strategy>{$1};
    }
  ;
strat:
  STRATEGY strat_body END {
      $$ = $2;
    }
  | STRATEGY condition strat_body END {
      $3.setCondition($2);
      $$ = $3;
    }
  ;
strat_body:
  PLAYORDER playorders END cardoptions {
      $$ = Strategy($2, $4);
    }
  | PLAYORDER playorders END {
      $$ = Strategy($2, {});
    }
  | cardoptions {
      $$ = Strategy({}, $1);
    }
  | %empty {
      $$ = Strategy();
    }
  ;
playorders:
  playorders ',' playorder {
      $1.push_back($3);
      $$ = $1;
    }
  | playorder {
      $$ = std::vector<Playorder>({$1});
    }
  ;
playorder:
    card_name {
        $$ = Playorder($1);
      }
    | ':' STRING {
        $$ = Playorder($2);
      }
  ;
cardoptions:
  cardoptions cardoption {
      $1.push_back($2);
      $$ = $1;
    }
  | cardoption {
      $$ = std::vector<GenericOption>{$1};
    }
  ;
cardoption:
  OPTIONS FOR card_name cardoption_expr END {
      $$ = GenericCardOption{$3, {}, $4};
    }
  | OPTIONS FOR card_name condition cardoption_expr END {
      $$ = GenericCardOption{$3, $4, $5};
    }
  | REACTIONS FOR reactoption_name cardoption_expr END {
      $$ = GenericReactOption{$3, {}, $4};
    }
  | REACTIONS FOR reactoption_name condition cardoption_expr END {
      $$ = GenericReactOption{$3, $4, $5};
    }
  ;
cardoption_expr:
  cardoption_expr_value {
      $$ = $1;
    }
  | cardoption_expr_list ',' cardoption_expr_value {
      // only parse as list if it has at least 1 comma
      $1.push_back($3);
      $$ = $1;
    }
  | cardoption_tagged_expr {
      $$ = $1;
    }
  | cardoption_tagged_expr_list ',' cardoption_tagged_expr {
      $1.push_back($3);
      $$ = $1;
    }
  ;
cardoption_expr_value:
  card_name ARROW card_name {
      $$ = std::make_pair($1, $3);
    }
  | card_name {
      $$ = std::any($1);
    }
  ;
cardoption_expr_list:
  cardoption_expr_list ',' cardoption_expr_value {
      $1.push_back($3);
      $$ = $1;
    }
  | cardoption_expr_value {
      $$ = std::vector<std::any>{$1};
    }
  ;
cardoption_tagged_expr:
  TAG_CHOOSE OPTION {
      $$ = TaggedExpr{OptionTag::ChooseOption, 1};
    }
  | TAG_CHOOSE OPTION INT {
      $$ = TaggedExpr{OptionTag::ChooseOption, $3};
    }
  | TAG_IGNORE OPTION {
      $$ = TaggedExpr{OptionTag::ChooseOption, -1};
    }
  | TAG_DISCARD '(' cardoption_expr ')' {
      $$ = TaggedExpr{OptionTag::Discard, $3};
    }
  | TAG_KEEP '(' cardoption_expr ')' {
      $$ = TaggedExpr{OptionTag::Keep, $3};
    }
  | TAG_TRASH '(' cardoption_expr ')' {
      $$ = TaggedExpr{OptionTag::Trash, $3};
    }
  ;
cardoption_tagged_expr_list:
  cardoption_tagged_expr_list ',' cardoption_tagged_expr {
      $1.push_back($3);
      $$ = $1;
    }
  | cardoption_tagged_expr {
      $$ = std::vector<TaggedExpr>{$1};
    }
  ;
%%

int parse_buylist(char const* text, BuylistCollection& ret, StrategyCollection& strats) {
  auto buf = yy_scan_string(text);
  yycolumn = 1;
  yylineno = 1;

  int ok = 0;
  try {
    yy::parser p(ret, strats);
    // p.set_debug_level(1);
    ok = p.parse();
  }
  catch (...) {
    yy_delete_buffer(buf);
    throw;
  }

  yy_delete_buffer(buf);
  return ok;
}

void yy::parser::error (const location_type& l, const std::string& m) {
  cerr << "Parse error in line " << l << ": " << m << endl;
  throw BuylistParseError{l.begin.line, l.end.line, l.begin.column, l.end.column, m};
}

