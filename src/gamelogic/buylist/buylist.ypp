%code requires {
  #include <vector>
  #include "buylist.h"
  #include "conditionfactory.h"
}

%{
    #define YYERROR_VERBOSE
    #include <cstdio>
    #include <iostream>
    #include "buylist.h"
    #include "buylist.tab.hpp"
    using namespace std;

    extern int yylex(yy::parser::semantic_type*, yy::parser::location_type*);
    extern "C" {
        extern FILE *yyin;
    }

    extern int parse_buylist(char const* fn, BuylistCollection& ret);
%}

%locations

%parse-param { BuylistCollection& ret }
%define parse.trace

%language "c++"
%define api.value.type variant

// define the constant-string tokens:
%token BUYLIST LIST END COMMENT LPAREN RPAREN NOT IF NEWLINE

%token <int> INT
%token <std::string> STRING

%nterm <std::vector<Buylist>> lists
%nterm <Buylist> list
%nterm <std::vector<BuyAction>> list_entries
%nterm <BuyAction> list_entry

%nterm <Condition::Ptr> condition
%nterm <std::vector<std::any>> func_arglist
%nterm <Condition::Ptr> condition_expr
%nterm <CardId> card_name
%nterm <std::any> expr
%nterm <std::any> constant

%%

buylist:
  buylist_section {
      cout << "done" << endl;
    }
  ;
buylist_section:
  BUYLIST lists END {
      ret = BuylistCollection({$2});
    }
  ;
lists:
  lists list {
      $1.push_back($2);
      $$ = $1;
    }
  | list {
      $$ = std::vector<Buylist>{$1};
    }
  ;
list:
  LIST list_entries END {
      $$ = Buylist($2);
    }
  | LIST condition list_entries END {
      $$ = Buylist($2, $3);
    }
  ;
list_entries:
  list_entries list_separator list_entry {
      $1.push_back($3);
      $$ = $1;
    }
  | list_entry {
      $$ = {$1};
    }
  | %empty {
      $$ = {};
    }
  ;
list_separator:
  ',' | NEWLINE
  ;
list_entry:
  card_name {
      $$ = BuyAction($1);
    }
  | card_name condition {
      $$ = BuyAction($2, $1);
    }
  ;
condition:
  IF condition_expr {
      $$ = $2;
    }
  | IF NOT condition_expr {
      $$ = createCondition("Negate", {$3});
    }
  ;
condition_expr:
  STRING '(' func_arglist ')' {
      try {
        $$ = createCondition($1, $3);
      }
      catch (InvalidConditionError e) {
        throw parser::syntax_error(yylhs.location, e.error);
      }
    }
  ;
func_arglist:
  expr {
      $$ = std::vector<std::any>{$1};
    }
  | func_arglist ',' expr {
      $1.push_back($3);
      $$ = $1;
    }
  ;
expr:
  constant {
      $$ = std::any($1);
    }
  | condition_expr {
      $$ = std::any($1);
    }
  ;
constant:
  INT {
      $$ = std::any($1);
    }
  | card_name {
      $$ = std::any($1);
    }
  ;
card_name:
  STRING {
      $$ = cardId($1);
    }
  ;
%%

int parse_buylist(char const* fn, BuylistCollection& ret) {
  // open a file handle to a particular file:
  FILE *myfile = fopen(fn, "r");
  // make sure it's valid:
  if (!myfile) {
    cout << "error opening file" << endl;
    return -1;
  }
  // Set flex to read from it instead of defaulting to STDIN:
  yyin = myfile;

  // Parse through the input:
  yy::parser p(ret);
  p.set_debug_level(1);
  int ok = p.parse();
  fclose(myfile);
  return ok;
}

void yy::parser::error (const location_type& l, const std::string& m) {
  cout << "Parse error in line " << l << ": " << m << endl;
  exit(-1);
}

